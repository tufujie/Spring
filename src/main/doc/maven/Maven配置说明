settings.xml中主要包括以下元素：
1.localRepository：
表示Maven用来在本地储存信息的本地仓库的目录。默认是用户目录下面的.m2/repository目录，建议Win不要放在C盘，改成D:\m2\repository路径下。
在导入jar包到本地仓库的时候会使将jar包放入这个路径下
mvn install:install-file -Dfile=commons-configuration-1.6.jar -DgroupId=com.json -DartifactId=commons-configuration -Dversion=1.6 -Dpackaging=jar
Dfile: jar包的相对或绝对路径
DgroupId:：jar包groupId
DartifactId：jar包artifactId
Dversion: jar包版本号
Dpackaging: 打包成jar包
3：安装完成后，在pom里头添加如下依赖：
<dependency>
<groupId>com.json</groupId>
<artifactId>commons-configuration</artifactId>
<version>1.6</version>
</dependency>

2.interactiveMode：
表示是否使用交互模式，默认是true；如果设为false，那么当Maven需要用户进行输入的时候，它会使用一个默认值。

3.offline：
表示是否离线，默认是false。这个属性表示在Maven进行项目编译和部署等操作时是否允许Maven进行联网来下载所需要的信息。

4.pluginGroups：
在pluginGroups元素下面可以定义一系列的pluginGroup元素。表示当通过plugin的前缀来解析plugin的时候到哪里寻找。
pluginGroup元素指定的是plugin的groupId。默认情况下，Maven会自动把org.apache.maven.plugins和org.codehaus.mojo添加到pluginGroups下。

5.proxies：
其下面可以定义一系列的proxy子元素，表示Maven在进行联网时需要使用到的代理。当设置了多个代理的时候第一个标记active为true的代理将会被使用。下面是一个使用代理的例子：

1、添加新的系统环境变量MAVEN_HOME， 并设置其值为你安装的目录
MAVEN_HOME
D:\apache-maven-3.5.0
2、更新系统PATH 变量， 添加
;%MAVEN_HOME%\bin;
到尾部
3、测试maven配置是否成功打开命令行窗口，输入mvn -v，如果有maven 版本信息输出则证明配置成功，否则请查看自己配置路径等是否正确。
注意：安装maven前请确保已安装JDK并成功配置其环境变量。

Maven 添加自己的架包到本地仓库及到项目中
下载到仓库中：2中方式
手动：
假设在第三方私服有架包配置：
<dependency>
  <groupId>com.jd.open.api.sdk</groupId>
  <artifactId>open-api-sdk</artifactId>
  <version>2.0</version>
</dependency>
那么artifactId和version对应的名称就会有 open-api-sdk-2.0.jar 这个架包，下载下来，存放在 E:\download 目录下，那么存放在本地仓库的命令是，-Dfile一般用绝对目录就行，用相对目录也行
mvn install:install-file -Dfile=E:\download\open-api-sdk-2.0.jar -DgroupId=com.jd.open.api.sdk -DartifactId=open-api-sdk -Dversion=2.0 -Dpackaging=jar
最后在本地仓库的目录类似于
groupId\artifactId\version的样子
自动引用：
假设在第三方私服有架包配置：
<dependency>
  <groupId>com.jd.open.api.sdk</groupId>
  <artifactId>open-api-sdk</artifactId>
  <version>2.0</version>
</dependency>
那么将这个架包引入pom.xml文件即可

Maven使用之packing篇
项目的打包类型：pom、jar、war
项目中一般使用maven进行模块管理，每个模块下对应都有一个pom文件，pom文件中维护了各模块之间的依赖和继承关系。项目模块化可以将通用的部分抽离出来，方便重用；修改一部分代码不再是build整个项目，缩短了build时间；此外各模块都有自己的pom文件，结构更清晰。
使用maven进行模块划分管理，一般都会有一个父级项目，pom文件除了GAV(groupId, artifactId, version)是必须要配置的，另一个重要的属性就是packing打包类型，所有的父级项目的packing都为pom，packing默认是jar类型，如果不作配置，maven会将该项目打成jar包。作为父级项目，还有一个重要的属性，那就是modules，通过modules标签将项目的所有子项目引用进来，在build父级项目时，会根据子模块的相互依赖关系整理一个build顺序，然后依次build。
而对于各个子项目，需要在其对应的pom文件开头申明对父级项目的引用，通过GAV实现。对于子项目自己的GAV配置，GV如果不配置，则会从父级项目的配置继承过来。子模块可通过dependencies标签来添加自己的依赖，此外子类项目的packing值只能是war或者jar，前面已经说过，packing默认是jar类型。如果是需要部署的项目，则需要打包成war类型，如果只是内部调用或者是作服务使用，则推荐打包成jar类型。