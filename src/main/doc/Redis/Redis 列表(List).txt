Redis 列表(List)
Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）
一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。
实例
LPUSH runoobkey redis
(integer) 1
LPUSH runoobkey mongodb
(integer) 2
LPUSH runoobkey mysql
(integer) 3
LRANGE runoobkey 0 10
1) "mysql"
2) "mongodb"
3) "redis"
在以上实例中我们使用了 LPUSH 将三个值插入了名为 runoobkey 的列表当中。
Redis 列表命令
下表列出了列表相关的基本命令：
序号	命令及描述
添加元素：
1	LPUSH key value1 [value2] 
将一个或多个值插入到列表头部，如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作。 当 key 存在但不是列表类型时，返回一个错误。
注意：在Redis 2.4版本以前的 LPUSH 命令，都只接受单个 value 值。
语法
redis Lpush 命令基本语法如下：
LPUSH KEY_NAME VALUE1.. VALUEN
可用版本
>= 1.0.0
返回值
执行 LPUSH 命令后，列表的长度。
实例
127.0.0.1:6379> LPUSH list1 "foo"
(integer) 1
127.0.0.1:6379> LPUSH list1 "bar"
(integer) 2
127.0.0.1:6379> LRANGE list1 0 -1
1) "bar"
2) "foo"
2	LPUSHX key value 
将一个值插入到已存在的列表头部，列表不存在时操作无效。
语法
redis Lpushx 命令基本语法如下：
LPUSHX KEY_NAME VALUE1.. VALUEN
可用版本
>= 2.2.0
返回值
LPUSHX 命令执行之后，列表的长度。
实例
127.0.0.1:6379> LPUSH list1 "foo"
(integer) 1
127.0.0.1:6379> LPUSHX list1 "bar"
(integer) 2
127.0.0.1:6379> LPUSHX list2 "bar"
(integer) 0
127.0.0.1:6379> LRANGE list1 0 -1
1) "bar"
2) "foo"

3	LINSERT key BEFORE|AFTER pivot value 
在列表的元素前或者后插入元素，当指定元素不存在于列表中时，不执行任何操作。
当列表不存在时，被视为空列表，不执行任何操作。
如果 key 不是列表类型，返回一个错误。
语法
redis Linsert 命令基本语法如下：
LINSERT key BEFORE|AFTER pivot value
将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。
可用版本
>= 1.0.0
返回值
如果命令执行成功，返回插入操作完成之后，列表的长度。 如果没有找到指定元素 ，返回 -1 。 如果 key 不存在或为空列表，返回 0 。
实例
RPUSH mylist "Hello"
(integer) 1
RPUSH mylist "World"
(integer) 2
LINSERT mylist BEFORE "World" "There"
(integer) 3
LRANGE mylist 0 -1
1) "Hello"
2) "There"
3) "World"

4	RPUSH key value1 [value2] 
在列表中添加一个或多个值
如果列表不存在，一个空列表会被创建并执行 RPUSH 操作。 当列表存在但不是列表类型时，返回一个错误。
注意：在 Redis 2.4 版本以前的 RPUSH 命令，都只接受单个 value 值。
语法
redis Rpush 命令基本语法如下：
RPUSH KEY_NAME VALUE1..VALUEN
可用版本
>= 1.0.0
返回值
执行 RPUSH 操作后，列表的长度。
实例
RPUSH mylist "hello"
(integer) 1
RPUSH mylist "foo"
(integer) 2
RPUSH mylist "bar"
(integer) 3
LRANGE mylist 0 -1
1) "hello"
2) "foo"
3) "bar"
5	RPUSHX key value 
为已存在的列表添加值
语法
redis Rpushx 命令基本语法如下：
RPUSHX KEY_NAME VALUE1..VALUEN
可用版本
>= 2.2.0
返回值
执行 Rpushx 操作后，列表的长度。
实例
RPUSH mylist "hello"
(integer) 1
RPUSH mylist "foo"
(integer) 2
RPUSHX mylist2 "bar"
(integer) 0
LRANGE mylist 0 -1
1) "hello"
2) "foo"

删除元素：
1	LPOP key 
移出并获取列表的第一个元素
语法
redis Lpop 命令基本语法如下：
Lpop KEY_NAME 
可用版本
>= 1.0.0
返回值
列表的第一个元素。 当列表 key 不存在时，返回 nil 。
实例
RPUSH list1 "foo"
(integer) 1
RPUSH list1 "bar"
(integer) 2
LPOP list1
"foo"
2	RPOP key 
移除并获取列表最后一个元素
语法
redis Rpop 命令基本语法如下：
RPOP KEY_NAME 
可用版本
>= 1.0.0
返回值
列表的最后一个元素。 当列表不存在时，返回 nil 。
实例
RPUSH mylist "one"
(integer) 1
RPUSH mylist "two"
(integer) 2
RPUSH mylist "three"
(integer) 3
RPOP mylist
"three"
LRANGE mylist 0 -1
1) "one"
2) "two"

3	LREM key count value 
移除列表元素
COUNT 的值可以是以下几种：
count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。
count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。
count = 0 : 移除表中所有与 VALUE 相等的值。
语法
redis Lrem 命令基本语法如下：
LREM KEY_NAME COUNT VALUE
可用版本
>= 1.0.0
返回值
被移除元素的数量。 列表不存在时返回 0 。
实例
RPUSH mylist "hello"
(integer) 1
RPUSH mylist "hello"
(integer) 2
RPUSH mylist "foo"
(integer) 3
RPUSH mylist "hello"
(integer) 4
LREM mylist -2 "hello"
(integer) 2
3	BLPOP key1 [key2 ] timeout 
移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
语法
redis Blpop 命令基本语法如下：
BLPOP LIST1 LIST2 .. LISTN TIMEOUT
可用版本
>= 2.0.0
返回值
如果列表为空，返回一个 nil 。 否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。
实例
BLPOP list1 100
在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回 nil 。
(nil)
(100.06s)
4	BRPOP key1 [key2 ] timeout 
移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
语法
redis Blpop 命令基本语法如下：
BRPOP LIST1 LIST2 .. LISTN TIMEOUT 
可用版本
>= 2.0.0
返回值
假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。
实例
BRPOP list1 100
在以上实例中，操作会被阻塞，如果指定的列表 key list1 存在数据则会返回第一个元素，否则在等待100秒后会返回 nil 。
(nil)
(100.06s)
5	BRPOPLPUSH source destination timeout 
从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
语法
redis Brpoplpush 命令基本语法如下：
BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT 
可用版本
>= 2.0.0
返回值
假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。
实例
# 非空列表
BRPOPLPUSH msg reciver 500
"hello moto"                        # 弹出元素的值
(3.38s)                             # 等待时长
LLEN reciver
(integer) 1
LRANGE reciver 0 0
1) "hello moto"
# 空列表
BRPOPLPUSH msg reciver 1
(nil)
(1.34s)
6	RPOPLPUSH source destination 
移除列表的最后一个元素，并将该元素添加到另一个列表并返回
语法
redis Rpoplpush 命令基本语法如下：
RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME
可用版本
>= 1.0.0
返回值
被弹出的元素。
实例
RPUSH mylist "hello"
(integer) 1
RPUSH mylist "foo"
(integer) 2
RPUSH mylist "bar"
(integer) 3
RPOPLPUSH mylist myotherlist
"bar"
LRANGE mylist 0 -1
1) "hello"
2) "foo"
修改元素：
1	LSET key index value 
通过索引设置列表元素的值，当索引参数超出范围，或对一个空列表进行 LSET 时，返回一个错误。
关于列表下标的更多信息，请参考 LINDEX 命令。
语法
redis Lset 命令基本语法如下：
LSET KEY_NAME INDEX VALUE
可用版本
>= 1.0.0
返回值
操作成功返回 ok ，否则返回错误信息。
实例
RPUSH mylist "hello"
(integer) 1
RPUSH mylist "hello"
(integer) 2
RPUSH mylist "foo"
(integer) 3
RPUSH mylist "hello"
(integer) 4
LSET mylist 0 "bar"
OK
LRANGE mylist 0 -1
1: "bar"
2) "hello"
3) "foo"
4) "hello"
2	LTRIM key start stop 
对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
下标 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
语法
redis Ltrim 命令基本语法如下：
LTRIM KEY_NAME START STOP
可用版本
>= 1.0.0
返回值
命令执行成功时，返回 ok 。
实例
RPUSH mylist "hello"
(integer) 1
RPUSH mylist "hello"
(integer) 2
RPUSH mylist "foo"
(integer) 3
RPUSH mylist "bar"
(integer) 4
LTRIM mylist 1 -1
OK
LRANGE mylist 0 -1
1) "hello"
2) "foo"
3) "bar"

获取元素：
1	LINDEX key index 
通过索引获取列表中的元素，你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
语法
redis Lindex 命令基本语法如下：
LINDEX KEY_NAME INDEX_POSITION 
可用版本
>= 1.0.0
返回值
列表中下标为指定索引值的元素。 如果指定索引值不在列表的区间范围内，返回 nil 。
实例
LPUSH mylist "World"
(integer) 1
LPUSH mylist "Hello"
(integer) 2
LINDEX mylist 0
"Hello"
LINDEX mylist -1
"World"
LINDEX mylist 3        # index不在 mylist 的区间范围内
(nil)
2	LLEN key 
获取列表长度，如果列表 key 不存在，则 key 被解释为一个空列表，返回 0 。 如果 key 不是列表类型，返回一个错误。
语法
redis Llen 命令基本语法如下：
LLEN KEY_NAME 
可用版本
>= 1.0.0
返回值
列表的长度。
实例
RPUSH list1 "foo"
(integer) 1
RPUSH list1 "bar"
(integer) 2
LLEN list1
(integer) 2
3	LRANGE key start stop 
获取列表指定范围内的元素
区间以偏移量 START 和 END 指定。 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。
语法
redis Lrange 命令基本语法如下：
LRANGE KEY_NAME START END
可用版本
>= 1.0.0
返回值
一个列表，包含指定区间内的元素。
实例
(integer) 1
RPUSH mylist "two"
(integer) 2
RPUSH mylist "three"
(integer) 3
LRANGE mylist 0 0
1) "one"
LRANGE mylist -3 2
1) "one"
2) "two"
3) "three"
LRANGE mylist -100 100
1) "one"
2) "two"
3) "three"
LRANGE mylist 5 10
(empty list or set)

