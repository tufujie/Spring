Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：
批量操作在发送 EXEC 命令前被放入队列缓存。
收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。
在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。
一个事务从开始到执行会经历以下三个阶段：
开始事务。
命令入队。
执行事务。
实例
以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令：
MULTI
OK

SET book-name "Mastering C++ in 21 days"
QUEUED

GET book-name
QUEUED

SADD tag "C++" "Programming" "Mastering Series"
QUEUED

SMEMBERS tag
QUEUED

EXEC
1) OK
2) "Mastering C++ in 21 days"
3) (integer) 3
4) 1) "Mastering Series"
   2) "C++"
   3) "Programming"
单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。
事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。
这是官网上的说明 From redis docs on transactions:
It's important to note that even when a command fails, all the other commands in the queue are processed – Redis will not stop the processing of commands.
比如：
redis 127.0.0.1:7000> multi
OK
redis 127.0.0.1:7000> set a aaa
QUEUED
redis 127.0.0.1:7000> set b bbb
QUEUED
redis 127.0.0.1:7000> set c ccc
QUEUED
redis 127.0.0.1:7000> exec
1) OK
2) OK
3) OK
如果在 set b bbb 处失败，set a 已成功不会回滚，set c 还会继续执行。
Redis 事务命令
下表列出了 redis 事务的相关命令：
序号	命令及描述
1	DISCARD 
取消事务，放弃执行事务块内的所有命令。
语法
redis Discard 命令基本语法如下：
DISCARD
可用版本
>= 2.0.0
返回值
总是返回 OK 。
实例
MULTI
OK
PING
QUEUED
SET greeting "hello"
QUEUED
DISCARD
OK
2	EXEC 
执行所有事务块内的命令。
语法
redis Exec 命令基本语法如下：
Exec
可用版本
>= 1.2.0
返回值
事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。
实例
# 事务被成功执行

MULTI
OK

INCR user_id
QUEUED

INCR user_id
QUEUED

INCR user_id
QUEUED

PING
QUEUED

EXEC
1) (integer) 1
2) (integer) 2
3) (integer) 3
4) PONG
# 监视 key ，且事务成功执行
WATCH lock lock_times
OK
MULTI
OK
SET lock "huangz"
QUEUED
INCR lock_times
QUEUED
EXEC
1) OK
2) (integer) 1
# 监视 key ，且事务被打断
WATCH lock lock_times
OK
MULTI
OK
SET lock "joe"        # 就在这时，另一个客户端修改了 lock_times 的值
QUEUED
INCR lock_times
QUEUED
EXEC                  # 因为 lock_times 被修改， joe 的事务执行失败
(nil)
3	MULTI 
标记一个事务块的开始。
事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令原子性(atomic)地执行。
语法
redis Multi 命令基本语法如下：
Multi
可用版本
>= 1.2.0
返回值
总是返回 OK 。
实例
MULTI            # 标记事务开始
OK
INCR user_id     # 多条命令按顺序入队
QUEUED
INCR user_id
QUEUED
INCR user_id
QUEUED
PING
QUEUED
EXEC             # 执行
1) (integer) 1
2) (integer) 2
3) (integer) 3
4) PONG
4	WATCH key [key ...] 
监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。
，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断
语法
redis Watch 命令基本语法如下：
WATCH key [key ...]
可用版本
>= 2.2.0
返回值
总是返回 OK 。
实例
WATCH lock lock_times
OK
5	UNWATCH 
取消 WATCH 命令对所有 key 的监视。
语法
redis Unwatch 命令基本语法如下：
UNWATCH 
可用版本
>= 2.2.0
返回值
总是返回 OK 。
实例
WATCH lock lock_times
OK
UNWATCH
OK