Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。
有序集合的成员是唯一的,但分数(score)却可以重复。
集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。
实例
ZADD runoobkey 1 redis
(integer) 1
ZADD runoobkey 2 mongodb
(integer) 1
ZADD runoobkey 3 mysql
(integer) 1
ZADD runoobkey 3 mysql
(integer) 0
ZADD runoobkey 4 mysql
(integer) 0
ZRANGE runoobkey 0 10 WITHSCORES

1) "redis"
2) "1"
3) "mongodb"
4) "2"
5) "mysql"
6) "4"
在以上实例中我们通过命令 ZADD 向 redis 的有序集合中添加了三个值并关联上分数。
Redis 有序集合命令
下表列出了 redis 有序集合的基本命令:
序号	命令及描述
添加元素
1	ZADD key score1 member1 [score2 member2] 
向有序集合添加一个或多个成员，或者更新已存在成员的分数
如果某个成员已经是有序集的成员，那么更新这个成员的分数值，并通过重新插入这个成员元素，来保证该成员在正确的位置上。
分数值可以是整数值或双精度浮点数。
如果有序集合 key 不存在，则创建一个空的有序集并执行 ZADD 操作。
当 key 存在但不是有序集类型时，返回一个错误。
注意： 在 Redis 2.4 版本以前， ZADD 每次只能添加一个元素。
语法
redis Zadd 命令基本语法如下：
ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN
可用版本
>= 1.2.0
返回值
被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。
实例
ZADD myzset 1 "one"
(integer) 1
ZADD myzset 1 "uno"
(integer) 1
ZADD myzset 2 "two" 3 "three"
(integer) 2
ZRANGE myzset 0 -1 WITHSCORES
1) "one"
2) "1"
3) "uno"
4) "1"
5) "two"
6) "2"
7) "three"
8) "3"

2	ZINTERSTORE destination numkeys key [key ...] 
计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到 destination 。
默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。
语法
redis Zinterstore 命令基本语法如下：
ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
可用版本
>= 2.0.0
返回值
保存到目标结果集的的成员数量。
实例
# 有序集 mid_test
ZADD mid_test 70 "Li Lei"
(integer) 1
ZADD mid_test 70 "Han Meimei"
(integer) 1
ZADD mid_test 99.5 "Tom"
(integer) 1

# 另一个有序集 fin_test
ZADD fin_test 88 "Li Lei"
(integer) 1
ZADD fin_test 75 "Han Meimei"
(integer) 1
ZADD fin_test 99.5 "Tom"
(integer) 1

# 交集
ZINTERSTORE sum_point 2 mid_test fin_test
(integer) 3

# 显示有序集内所有成员及其分数值
ZRANGE sum_point 0 -1 WITHSCORES     
1) "Han Meimei"
2) "145"
3) "Li Lei"
4) "158"
5) "Tom"
6) "199"
3	ZUNIONSTORE destination numkeys key [key ...] 
计算给定的一个或多个有序集的并集，并存储在新的 key 中，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到 destination 。
默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和 。
语法
redis Zunionstore 命令基本语法如下：
ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
可用版本
>= 2.0.0
返回值
保存到 destination 的结果集的成员数量。
实例
ZRANGE programmer 0 -1 WITHSCORES
1) "peter"
2) "2000"
3) "jack"
4) "3500"
5) "tom"
6) "5000"

ZRANGE manager 0 -1 WITHSCORES
1) "herry"
2) "2000"
3) "mary"
4) "3500"
5) "bob"
6) "4000"

ZUNIONSTORE salary 2 programmer manager WEIGHTS 1 3   # 公司决定加薪。。。除了程序员。。。
(integer) 6

ZRANGE salary 0 -1 WITHSCORES
1) "peter"
2) "2000"
3) "jack"
4) "3500"
5) "tom"
6) "5000"
7) "herry"
8) "6000"
9) "mary"
10) "10500"
11) "bob"
12) "12000"

删除元素：
1	ZREM key member [member ...] 
移除有序集合中的一个或多个成员，不存在的成员将被忽略。
当 key 存在但不是有序集类型时，返回一个错误。
注意： 在 Redis 2.4 版本以前， ZREM 每次只能删除一个元素。
语法
redis Zrem 命令基本语法如下：
ZREM key member [member ...]
可用版本
>= 1.2.0
返回值
被成功移除的成员的数量，不包括被忽略的成员。
实例
# 测试数据

ZRANGE page_rank 0 -1 WITHSCORES
1) "bing.com"
2) "8"
3) "baidu.com"
4) "9"
5) "google.com"
6) "10"


# 移除单个元素

ZREM page_rank google.com
(integer) 1

ZRANGE page_rank 0 -1 WITHSCORES
1) "bing.com"
2) "8"
3) "baidu.com"
4) "9"


# 移除多个元素

ZREM page_rank baidu.com bing.com
(integer) 2

ZRANGE page_rank 0 -1 WITHSCORES
(empty list or set)


# 移除不存在元素

ZREM page_rank non-exists-element
(integer) 0
2	ZREMRANGEBYLEX key min max 
移除有序集合中给定的字典区间的所有成员
语法
redis Zremrangebylex命令基本语法如下：
ZREMRANGEBYLEX key min max
可用版本
>= 2.8.9
返回值
被成功移除的成员的数量，不包括被忽略的成员。
实例
ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e
(integer) 5
ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha
(integer) 5
ZRANGE myzset 0 -1
1) "ALPHA"
 2) "aaaa"
 3) "alpha"
 4) "b"
 5) "c"
 6) "d"
 7) "e"
 8) "foo"
 9) "zap"
10) "zip"
ZREMRANGEBYLEX myzset [alpha [omega
(integer) 6
ZRANGE myzset 0 -1
1) "ALPHA"
2) "aaaa"
3) "zap"
4) "zip"

3	ZREMRANGEBYRANK key start stop 
移除有序集合中给定的排名区间的所有成员，指定排名(rank)区间内的所有成员。
语法
redis Zremrangebyrank 命令基本语法如下：
ZREMRANGEBYRANK key start stop
可用版本
>= 2.0.0
返回值
被移除成员的数量。
实例
ZADD salary 2000 jack
(integer) 1
ZADD salary 5000 tom
(integer) 1
ZADD salary 3500 peter
(integer) 1

ZREMRANGEBYRANK salary 0 1       # 移除下标 0 至 1 区间内的成员
(integer) 2

ZRANGE salary 0 -1 WITHSCORES    # 有序集只剩下一个成员
1) "tom"
2) "5000"
4	ZREMRANGEBYSCORE key min max 
移除有序集合中给定的分数区间的所有成员
语法
redis Zremrangebyscore 命令基本语法如下：
ZREMRANGEBYSCORE key min max
可用版本
>= 1.2.0
返回值
被移除成员的数量。
实例
ZRANGE salary 0 -1 WITHSCORES          # 显示有序集内所有成员及其 score 值
1) "tom"
2) "2000"
3) "peter"
4) "3500"
5) "jack"
6) "5000"

ZREMRANGEBYSCORE salary 1500 3500      # 移除所有薪水在 1500 到 3500 内的员工
(integer) 2

ZRANGE salary 0 -1 WITHSCORES          # 剩下的有序集成员
1) "jack"
2) "5000"

修改元素：
1	ZINCRBY key increment member 
有序集合中对指定成员的分数加上增量 increment
可以通过传递一个负数值 increment ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。
当 key 不存在，或分数不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。
当 key 不是有序集类型时，返回一个错误。
分数值可以是整数值或双精度浮点数。
语法
redis Zincrby 命令基本语法如下：
ZINCRBY key increment member
可用版本
>= 1.2.0
返回值
member 成员的新分数值，以字符串形式表示。
实例
ZADD myzset 1 "one"
(integer) 1
ZADD myzset 2 "two"
(integer) 1
ZINCRBY myzset 2 "one"
"3"
ZRANGE myzset 0 -1 WITHSCORES
1) "two"
2) "2"
3) "one"
4) "3"


获取元素：
1	ZCARD key 
获取有序集合的成员数
语法
redis Zcard 命令基本语法如下：
ZCARD KEY_NAME
可用版本
>= 1.2.0
返回值
当 key 存在且是有序集类型时，返回有序集的基数。 当 key 不存在时，返回 0 。
实例
ZADD myzset 1 "one"
(integer) 1
ZADD myzset 2 "two"
(integer) 1
ZCARD myzset
(integer) 2

2	ZCOUNT key min max 
计算在有序集合中指定区间分数的成员数
语法
redis Zcount 命令基本语法如下：
ZCOUNT key min max
可用版本
>= 2.0.0
返回值
分数值在 min 和 max 之间的成员的数量。
实例
ZADD myzset 1 "hello"
(integer) 1
ZADD myzset 1 "foo"
(integer) 1
ZADD myzset 2 "world" 3 "bar"
(integer) 2
ZCOUNT myzset 1 3
(integer) 4
3	ZLEXCOUNT key min max 
在有序集合中计算指定字典区间内成员数量
语法
redis Zlexcount 命令基本语法如下：
ZLEXCOUNT KEY MIN MAX
可用版本
>= 2.8.9
返回值
指定区间内的成员数量。
实例
ZADD myzset 0 a 0 b 0 c 0 d 0 e
(integer) 5
ZADD myzset 0 f 0 g
(integer) 2
ZLEXCOUNT myzset - +
(integer) 7
ZLEXCOUNT myzset [b [f
(integer) 5
3	ZRANGE key start stop [WITHSCORES] 
通过索引区间返回有序集合成指定区间内的成员
其中成员的位置按分数值递增(从小到大)来排序。
具有相同分数值的成员按字典序(lexicographical order )来排列。
如果你需要成员按
值递减(从大到小)来排列，请使用 ZREVRANGE 命令。
下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。
你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。
语法
redis Zrange 命令基本语法如下：
ZRANGE key start stop [WITHSCORES]
可用版本
>= 1.2.0
返回值
指定区间内，带有分数值(可选)的有序集成员的列表。
实例
ZRANGE salary 0 -1 WITHSCORES             # 显示整个有序集成员
1) "jack"
2) "3500"
3) "tom"
4) "5000"
5) "boss"
6) "10086"

ZRANGE salary 1 2 WITHSCORES              # 显示有序集下标区间 1 至 2 的成员
1) "tom"
2) "5000"
3) "boss"
4) "10086"

ZRANGE salary 0 200000 WITHSCORES         # 测试 end 下标超出最大下标时的情况
1) "jack"
2) "3500"
3) "tom"
4) "5000"
5) "boss"
6) "10086"

ZRANGE salary 200000 3000000 WITHSCORES                  # 测试当给定区间不存在于有序集时的情况
(empty list or set)
4	ZRANGEBYLEX key min max [LIMIT offset count] 
通过字典区间返回有序集合的成员
语法
redis Zrange 命令基本语法如下：
ZRANGEBYLEX key min max [LIMIT offset count]
可用版本
>= 2.8.9
返回值
指定区间内的元素列表。
实例
ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g
(integer) 7
ZRANGEBYLEX myzset - [c
1) "a"
2) "b"
3) "c"
ZRANGEBYLEX myzset - (c
1) "a"
2) "b"
ZRANGEBYLEX myzset [aaa (g
1) "b"
2) "c"
3) "d"
4) "e"
5) "f"

5	ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 
通过分数返回有序集合指定区间内的成员。有序集成员按分数值递增(从小到大)次序排列。
具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。
默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，你也可以通过给参数前增加 ( 符号来使用可选的开区间 (小于或大于)。
举个例子：
ZRANGEBYSCORE zset (1 5
返回所有符合条件 1 < score <= 5 的成员，而
ZRANGEBYSCORE zset (5 (10
则返回所有符合条件 5 < score < 10 的成员。
语法
redis Zrangebyscore 命令基本语法如下：
ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
可用版本
>= 1.0.5
返回值
指定区间内，带有分数值(可选)的有序集成员的列表。
实例
ZADD salary 2500 jack                        # 测试数据
(integer) 0
ZADD salary 5000 tom
(integer) 0
ZADD salary 12000 peter
(integer) 0
ZRANGEBYSCORE salary -inf +inf               # 显示整个有序集
1) "jack"
2) "tom"
3) "peter"
ZRANGEBYSCORE salary -inf +inf WITHSCORES    # 显示整个有序集及成员的 score 值
1) "jack"
2) "2500"
3) "tom"
4) "5000"
5) "peter"
6) "12000"
ZRANGEBYSCORE salary -inf 5000 WITHSCORES    # 显示工资 <=5000 的所有成员
1) "jack"
2) "2500"
3) "tom"
4) "5000"
ZRANGEBYSCORE salary (5000 400000            # 显示工资大于 5000 小于等于 400000 的成员
1) "peter"
6	ZRANK key member 
返回有序集合中指定成员的索引
语法
redis Zrank 命令基本语法如下：
ZRANK key member
可用版本
>= 2.0.0
返回值
如果成员是有序集 key 的成员，返回 member 的排名。 如果成员不是有序集 key 的成员，返回 nil 。
实例
ZRANGE salary 0 -1 WITHSCORES        # 显示所有成员及其 score 值
1) "peter"
2) "3500"
3) "tom"
4) "4000"
5) "jack"
6) "5000"
ZRANK salary tom                     # 显示 tom 的薪水排名，第二
(integer) 1
7	ZREVRANGE key start stop [WITHSCORES] 
返回有序集中指定区间内的成员，通过索引，分数从高到底
其中成员的位置按分数值递减(从大到小)来排列。
具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。
除了成员按分数值递减的次序排列这一点外， ZREVRANGE 命令的其他方面和 ZRANGE 命令一样。
语法
redis Zrevrange 命令基本语法如下：
ZREVRANGE key start stop [WITHSCORES]
可用版本
>= 1.2.0
返回值
指定区间内，带有分数值(可选)的有序集成员的列表。
实例
ZRANGE salary 0 -1 WITHSCORES        # 递增排列
1) "peter"
2) "3500"
3) "tom"
4) "4000"
5) "jack"
6) "5000"
ZREVRANGE salary 0 -1 WITHSCORES     # 递减排列
1) "jack"
2) "5000"
3) "tom"
4) "4000"
5) "peter"
6) "3500"
8	ZREVRANGEBYSCORE key max min [WITHSCORES] 
返回有序集中指定分数区间内的成员，分数从高到低排序。有序集成员按分数值递减(从大到小)的次序排列。
具有相同分数值的成员按字典序的逆序(reverse lexicographical order )排列。
除了成员按分数值递减的次序排列这一点外， ZREVRANGEBYSCORE 命令的其他方面和 ZRANGEBYSCORE 命令一样。
语法
redis Zrevrangebyscore 命令基本语法如下：
ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]
可用版本
>= 2.2.0
返回值
指定区间内，带有分数值(可选)的有序集成员的列表。
实例
ZADD salary 10086 jack
(integer) 1
ZADD salary 5000 tom
(integer) 1
ZADD salary 7500 peter
(integer) 1
ZADD salary 3500 joe
(integer) 1
ZREVRANGEBYSCORE salary +inf -inf   # 逆序排列所有成员
1) "jack"
2) "peter"
3) "tom"
4) "joe"
ZREVRANGEBYSCORE salary 10000 2000  # 逆序排列薪水介于 10000 和 2000 之间的成员
1) "peter"
2) "tom"
3) "joe"
9	ZREVRANK key member 
返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
。其中有序集成员按分数值递减(从大到小)排序。
排名以 0 为底，也就是说， 分数值最大的成员排名为 0 。
使用 ZRANK 命令可以获得成员按分数值递增(从小到大)排列的排名。
语法
redis Zrevrank 命令基本语法如下：
ZREVRANK key member
可用版本
>= 2.2.0
返回值
如果成员是有序集 key 的成员，返回成员的排名。 如果成员不是有序集 key 的成员，返回 nil 。
实例
ZRANGE salary 0 -1 WITHSCORES     # 测试数据
1) "jack"
2) "2000"
3) "peter"
4) "3500"
5) "tom"
6) "5000"
ZREVRANK salary peter     # peter 的工资排第二
(integer) 1
ZREVRANK salary tom       # tom 的工资最高
(integer) 0
10	ZSCORE key member 
返回有序集中，成员的分数值
语法
redis Zscore 命令基本语法如下：
ZSCORE key member
可用版本
>= 1.2.0
返回值
成员的分数值，以字符串形式表示。
实例
ZRANGE salary 0 -1 WITHSCORES    # 测试数据
1) "tom"
2) "2000"
3) "peter"
4) "3500"
5) "jack"
6) "5000"
ZSCORE salary peter              # 注意返回值是字符串
"3500"
11	ZSCAN key cursor [MATCH pattern] [COUNT count] 
迭代有序集合中的元素（包括元素成员和元素分值）
语法
redis Zscan 命令基本语法如下：
ZSCAN key cursor [MATCH pattern] [COUNT count]
可用版本
>= 2.8.0
返回值
返回的每个元素都是一个有序集合元素，一个有序集合元素由一个成员（member）和一个分值（score）组成。