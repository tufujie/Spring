Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。
Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。
集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。
实例
SADD runoobkey redis
(integer) 1
SADD runoobkey mongodb
(integer) 1
SADD runoobkey mysql
(integer) 1
SADD runoobkey mysql
(integer) 0
SMEMBERS runoobkey
1) "mysql"
2) "mongodb"
3) "redis"
在以上实例中我们通过 SADD 命令向名为 runoobkey 的集合插入的三个元素。
Redis 集合命令
下表列出了 Redis 集合基本命令：
序号	命令及描述
添加元素
1	SADD key member1 [member2] 
向集合添加一个或多个成员，已经存在于集合的成员元素将被忽略。
假如集合 key 不存在，则创建一个只包含添加的元素作成员的集合。
当集合 key 不是集合类型时，返回一个错误。
注意：在Redis2.4版本以前， SADD 只接受单个成员值。
语法
redis Sadd 命令基本语法如下：
SADD KEY_NAME VALUE1..VALUEN
可用版本
>= 1.0.0
返回值
被添加到集合中的新元素的数量，不包括被忽略的元素。
实例
SADD myset "hello"
(integer) 1
SADD myset "foo"
(integer) 1
SADD myset "hello"
(integer) 0
SMEMBERS myset
1) "hello"
2) "foo"
2	SDIFFSTORE destination key1 [key2] 
返回给定所有集合的差集并存储在 destination 中
如果指定的集合 key 已存在，则会被覆盖。
语法
redis Sdiffstore 命令基本语法如下：
SDIFFSTORE DESTINATION_KEY KEY1..KEYN 
可用版本
>= 1.0.0
返回值
结果集中的元素数量。
实例
SADD myset "hello"
(integer) 1
SADD myset "foo"
(integer) 1
SADD myset "bar"
(integer) 1
SADD myset2 "hello"
(integer) 1
SADD myset2 "world"
(integer) 1
SDIFFSTORE destset myset myset2
(integer) 2
SMEMBERS destset
1) "foo"
2) "bar"
3	SINTERSTORE destination key1 [key2] 
返回给定所有集合的交集并存储在 destination 中。如果指定的集合已经存在，则将其覆盖。
语法
redis Sinterstore 命令基本语法如下：
SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN 
可用版本
>= 1.0.0
返回值
返回存储交集的集合的元素数量。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "foo"
(integer) 1
SADD myset1 "bar"
(integer) 1
SADD myset2 "hello"
(integer) 1
SADD myset2 "world"
(integer) 1
SINTERSTORE myset myset1 myset2
(integer) 1
SMEMBERS myset
1) "hello"
4	SUNIONSTORE destination key1 [key2] 
所有给定集合的并集存储在 destination 集合中。如果 destination 已经存在，则将其覆盖。
语法
redis Sunionstore 命令基本语法如下：
SUNIONSTORE DESTINATION KEY KEY1..KEYN
可用版本
>= 1.0.0
返回值
结果集中的元素数量。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "world"
(integer) 1
SADD myset1 "bar"
(integer) 1
SADD myset2 "hello"
(integer) 1
SADD myset2 "bar"
(integer) 1
SUNIONSTORE myset myset1 myset2
(integer) 1
SMEMBERS myset
1) "bar"
2) "world"
3) "hello"
4) "foo"



删除元素：
1	SPOP key 
移除并返回集合中的一个随机元素
语法
redis Spop 命令基本语法如下：
SPOP KEY 
可用版本
>= 1.0.0
返回值
被移除的随机元素。 当集合不存在或是空集时，返回 nil 。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "world"
(integer) 1
SADD myset1 "bar"
(integer) 1
SPOP myset1
"bar"
SMEMBERS myset1
1) "Hello"
2) "world"
2	SREM key member1 [member2] 
移除集合中一个或多个成员，不存在的成员元素会被忽略。
当 key 不是集合类型，返回一个错误。
在 Redis 2.4 版本以前， SREM 只接受单个成员值。
语法
redis Srem 命令基本语法如下：
SREM KEY MEMBER1..MEMBERN
可用版本
>= 1.0.0
返回值
被成功移除的元素的数量，不包括被忽略的元素。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "world"
(integer) 1
SADD myset1 "bar"
(integer) 1
SREM myset1 "hello"
(integer) 1
SREM myset1 "foo"
(integer) 0
SMEMBERS myset1
1) "bar"
2) "world"

修改元素
1	SMOVE source destination member 
将 member 元素从 source 集合移动到 destination 集合
SMOVE 是原子性操作。
如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。
当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。
当 source 或 destination 不是集合类型时，返回一个错误。
语法
redis Smove 命令基本语法如下：
SMOVE SOURCE DESTINATION MEMBER 
可用版本
>= 1.0.0
返回值
如果成员元素被成功移除，返回 1 。 如果成员元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "world"
(integer) 1
SADD myset1 "bar"
(integer) 1
SADD myset2 "foo"
(integer) 1
SMOVE myset1 myset2 "bar"
(integer) 1
SMEMBERS myset1
1) "World"
2) "Hello"
SMEMBERS myset2
1) "foo"
2) "bar"


获取元素：
1	SCARD key 
获取集合的成员数
语法
redis Scard 命令基本语法如下：
SCARD KEY_NAME 
可用版本
>= 1.0.0
返回值
集合的数量。 当集合 key 不存在时，返回 0 。
实例
SADD myset "hello"
(integer) 1
SADD myset "foo"
(integer) 1
SADD myset "hello"
(integer) 0
SCARD myset
(integer) 2
2	SDIFF key1 [key2] 
返回给定所有集合的差集。不存在的集合 key 将视为空集。
差集的结果来自前面的 FIRST_KEY ,而不是后面的 OTHER_KEY1，也不是整个 FIRST_KEY OTHER_KEY1..OTHER_KEYN 的差集。
实例:
key1 = {a,b,c,d}
key2 = {c}
key3 = {a,c,e}
SDIFF key1 key2 key3 = {b,d}
语法
redis Sdiff 命令基本语法如下：
SDIFF FIRST_KEY OTHER_KEY1..OTHER_KEYN 
可用版本
>= 1.0.0
返回值
包含差集成员的列表。
实例
SADD key1 "a"
(integer) 1
SADD key1 "b"
(integer) 1
SADD key1 "c"
(integer) 1
SADD key2 "c"
(integer) 1
SADD key2 "d"
(integer) 1
SADD key2 "e"
(integer) 1
SDIFF key1 key2
1) "a"
2) "b"

3、	SINTER key1 [key2] 
返回给定所有集合的交集
Redis Sismember 命令判断成员元素是否是集合的成员。
语法
redis Sismember 命令基本语法如下：
SISMEMBER KEY VALUE 
可用版本
>= 1.0.0
返回值
如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0 。
实例
SADD myset1 "hello"
(integer) 1
SISMEMBER myset1 "hello"
(integer) 1
SISMEMBER myset1 "world"
(integer) 0
4	SMEMBERS key 
返回集合中的所有成员。 不存在的集合 key 被视为空集合。
语法
redis Smembers 命令基本语法如下：
SMEMBERS key
可用版本
>= 1.0.0
返回值
集合中的所有成员。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "world"
(integer) 1
SMEMBERS myset1
1) "World"
2) "Hello"
5	SISMEMBER key member 
判断 member 元素是否是集合 key 的成员
语法
redis Sismember 命令基本语法如下：
SISMEMBER KEY VALUE 
可用版本
>= 1.0.0
返回值
如果成员元素是集合的成员，返回 1 。 如果成员元素不是集合的成员，或 key 不存在，返回 0 。
实例
SADD myset1 "hello"
(integer) 1
SISMEMBER myset1 "hello"
(integer) 1
SISMEMBER myset1 "world"
(integer) 0
6	SRANDMEMBER key [count] 
返回集合中一个或多个随机数
从 Redis 2.6 版本开始， Srandmember 命令接受可选的 count 参数：
如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。
如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。
该操作和 SPOP 相似，但 SPOP 将随机元素从集合中移除并返回，而 Srandmember 则仅仅返回随机元素，而不对集合进行任何改动。
语法
redis Srandmember 命令基本语法如下：
SRANDMEMBER KEY [count]
可用版本
>= 1.0.0
返回值
只提供集合 key 参数时，返回一个元素；如果集合为空，返回 nil 。 如果提供了 count 参数，那么返回一个数组；如果集合为空，返回空数组。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "world"
(integer) 1
SADD myset1 "bar"
(integer) 1
SRANDMEMBER myset1
"bar"
SRANDMEMBER myset1 2
1) "Hello"
2) "world"
7	SUNION key1 [key2] 
返回所有给定集合的并集
。不存在的集合 key 被视为空集。
语法
redis Sunion 命令基本语法如下：
SUNION KEY KEY1..KEYN
可用版本
>= 1.0.0
返回值
并集成员的列表。
实例
SADD key1 "a"
(integer) 1
SADD key1 "b"
(integer) 1
SADD key1 "c"
(integer) 1
SADD key2 "c"
(integer) 1
SADD key2 "d"
(integer) 1
SADD key2 "e"
(integer) 1
SUNION key1 key2
1) "a"
2) "c"
3) "b"
4) "e"
5) "d"

8	SSCAN key cursor [MATCH pattern] [COUNT count] 
迭代集合中的元素语法
redis Sscan 命令基本语法如下：
SSCAN key cursor [MATCH pattern] [COUNT count]
可用版本
>= 1.0.0
返回值
数组列表。
实例
SADD myset1 "hello"
(integer) 1
SADD myset1 "hi"
(integer) 1
SADD myset1 "bar"
(integer) 1
sscan myset1 0 match h*
1) "0"
2) 1) "hello"
   2) "h1"