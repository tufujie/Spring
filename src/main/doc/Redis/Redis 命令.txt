Redis 命令
Redis 命令用于在 redis 服务上执行操作。
要在 redis 服务上执行命令需要一个 redis 客户端。Redis 客户端在我们之前下载的的 redis 的安装包中。
语法
Redis 客户端的基本语法为：
实例
以下实例讲解了如何启动 redis 客户端：
启动 redis 客户端，打开终端并输入命令 redis-cli。该命令会连接本地的 redis 服务。
PING
PONG
在以上实例中我们连接到本地的 redis 服务并执行 PING 命令，该命令用于检测 redis 服务是否启动。
在远程服务上执行命令
如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。
语法
$ redis-cli -h host -p port -a password
实例
以下实例演示了如何连接到主机为 127.0.0.1，端口为 6379 ，密码为 mypass 的 redis 服务上。
redis-cli -h 127.0.0.1 -p 6379 -a "mypass"
PING
PONG

Redis 键(key)
Redis 键命令用于管理 redis 的键。
语法
Redis 键命令的基本语法如下：
COMMAND KEY_NAME
实例
SET runoobkey redis
OK
DEL runoobkey
(integer) 1
删除一个不存在的key，例如 runoobkeytestdel
DEL runoobkeytestdel
(integer) 0
在以上实例中 DEL 是一个命令， runoobkey 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0
Redis keys 命令
下表给出了与 Redis 键相关的基本命令：
序号	命令及描述
1	DEL key
该命令用于在 key 存在时删除 key。不存在的 key 会被忽略。
语法
redis DEL 命令基本语法如下：
redis 127.0.0.1:6379> DEL KEY_NAME
可用版本
>= 1.0.0
返回值
被删除 key 的数量。
实例
首先，我们在 redis 中创建一个 key 并设置值。
redis 127.0.0.1:6379> SET w3ckey redis
OK
现在我们删除已创建的 key。
redis 127.0.0.1:6379> DEL w3ckey
(integer) 1
2	DUMP key 
序列化给定 key ，并返回被序列化的值。
语法
redis DUMP 命令基本语法如下：
redis 127.0.0.1:6379> DUMP KEY_NAME
可用版本
>= 2.6.0
返回值
如果 key 不存在，那么返回 nil 。 否则，返回序列化之后的值。
实例
首先，我们在 redis 中创建一个 key 并设置值。
SET greeting "hello, dumping world!"
OK
现在使用 DUMP 序列化键值。
DUMP greeting
"\x00\x15hello, dumping world!\x06\x00E\xa0Z\x82\xd8r\xc1\xde"
DUMP not-exists-key
(nil)
3	EXISTS key 
检查给定 key 是否存在。
语法
redis EXISTS 命令基本语法如下：
redis 127.0.0.1:6379> EXISTS KEY_NAME
可用版本
>= 1.0.0
返回值
若 key 存在返回 1 ，否则返回 0 。
实例
redis 127.0.0.1:6379> EXISTS runoob-new-key
(integer) 0
现在我们创建一个名为 runoob-new-key 的键并赋值，再使用 EXISTS 命令。
redis 127.0.0.1:6379> set runoob-new-key newkey
OK
redis 127.0.0.1:6379> EXISTS runoob-new-key
(integer) 1
4	EXPIRE key seconds
为给定 key 设置过期时间。key 过期后将不再可用。
语法
redis Expire 命令基本语法如下：
redis 127.0.0.1:6379> Expire KEY_NAME TIME_IN_SECONDS
可用版本
>= 1.0.0
返回值
设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。
实例
首先创建一个 key 并赋值：
redis 127.0.0.1:6379> SET runooobkey redis
OK
为 key 设置过期时间：
redis 127.0.0.1:6379> EXPIRE runooobkey 60
(integer) 1
以上实例中我们为键 runooobkey 设置了过期时间为 1 分钟，1分钟后该键会自动删除。
5	EXPIREAT key timestamp 
EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。
语法
redis Expireat 命令基本语法如下：
redis 127.0.0.1:6379> Expireat KEY_NAME TIME_IN_UNIX_TIMESTAMP
可用版本
>= 1.0.0
返回值
设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。
实例
首先创建一个 key 并赋值：
redis 127.0.0.1:6379> SET runoobkey redis
OK
为 key 设置过期时间：
redis 127.0.0.1:6379> EXPIREAT runoobkey 1293840000
(integer) 1
EXISTS runoobkey
(integer) 0
6	PEXPIRE key milliseconds 
设置 key 的过期时间以毫秒计。
语法
redis PEXPIRE 命令基本语法如下：
PEXPIRE key milliseconds
可用版本
>= 2.6.0
返回值
设置成功，返回 1
key 不存在或设置失败，返回 0
实例
首先创建一个 key 并赋值：
SET mykey "Hello"
"OK"
PEXPIRE mykey 1500
(integer) 1
TTL mykey
(integer) 1
PTTL mykey
(integer) 1498
redis>
7	PEXPIREAT key milliseconds-timestamp 
设置 key 过期时间的时间戳(unix timestamp) 以毫秒计
Redis PEXPIREAT 命令用于设置 key 的过期时间，以毫秒计。key 过期后将不再可用。
语法
redis PEXPIREAT 命令基本语法如下：
redis 127.0.0.1:6379> PEXPIREAT KEY_NAME TIME_IN_MILLISECONDS_IN_UNIX_TIMESTAMP
可用版本
>= 1.0.0
返回值
设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。
实例
首先创建一个 key 并赋值：
redis 127.0.0.1:6379> SET runoobkey redis
OK
为 key 设置过期时间：
redis 127.0.0.1:6379> PEXPIREAT runoobkey 1555555555005
(integer) 1
8	KEYS pattern 
查找所有符合给定模式( pattern)的 key 。
语法
redis KEYS 命令基本语法如下：
redis 127.0.0.1:6379> KEYS PATTERN
可用版本
>= 1.0.0
返回值
符合给定模式的 key 列表 (Array)。
实例
首先创建一些 key，并赋上对应值：
redis 127.0.0.1:6379> SET runoob1 redis
OK
redis 127.0.0.1:6379> SET runoob2 mysql
OK
redis 127.0.0.1:6379> SET runoob3 mongodb
OK
查找以 runoob 为开头的 key：
redis 127.0.0.1:6379> KEYS runoob*
1) "runoob3"
2) "runoob1"
3) "runoob2"
获取 redis 中所有的 key 可用使用 *。
redis 127.0.0.1:6379> KEYS *
1) "runoob3"
2) "runoob1"
3) "runoob2"
9	MOVE key db 
将当前数据库的 key 移动到给定的数据库 db 当中。
语法
redis Move 命令基本语法如下：
redis 127.0.0.1:6379> MOVE KEY_NAME DESTINATION_DATABASE
可用版本
>= 1.0.0
返回值
移动成功返回 1 ，失败则返回 0 。
实例
# key 存在于当前数据库
SELECT 0                             # redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。
OK
SET song "secret base - Zone"
OK
MOVE song 1                          # 将 song 移动到数据库 1
(integer) 1
EXISTS song                          # song 已经被移走
(integer) 0
SELECT 1                             # 使用数据库 1
OK
EXISTS song                        # 证实 song 被移到了数据库 1 (注意命令提示符变成了"redis:1"，表明正在使用数据库 1)
(integer) 1
# 当 key 不存在的时候
EXISTS fake_key
(integer) 0
MOVE fake_key 0                    # 试图从数据库 1 移动一个不存在的 key 到数据库 0，失败
(integer) 0
select 0                           # 使用数据库0
OK
EXISTS fake_key                      # 证实 fake_key 不存在
(integer) 0
# 当源数据库和目标数据库有相同的 key 时
SELECT 0                             # 使用数据库0
OK
SET favorite_fruit "banana"
OK
SELECT 1                             # 使用数据库1
OK
SET favorite_fruit "apple"
OK
SELECT 0                           # 使用数据库0，并试图将 favorite_fruit 移动到数据库 1
OK
MOVE favorite_fruit 1                # 因为两个数据库有相同的 key，MOVE 失败
(integer) 0
GET favorite_fruit                   # 数据库 0 的 favorite_fruit 没变
"banana"
SELECT 1
OK
GET favorite_fruit                 # 数据库 1 的 favorite_fruit 也是
"apple"
10	PERSIST key 
移除 key 的过期时间，key 将持久保持。
语法
redis PERSIST 命令基本语法如下：
redis 127.0.0.1:6379> PERSIST KEY_NAME
可用版本
>= 2.2.0
返回值
当过期时间移除成功时，返回 1 。 如果 key 不存在或 key 没有设置过期时间，返回 -1 。
实例
SET mykey "Hello"
OK
EXPIRE mykey 10  # 为 key 设置生存时间
(integer) 1
TTL mykey
(integer) 10
PERSIST mykey    # 移除 key 的生存时间
(integer) 1
TTL mykey
(integer) -1
11	PTTL key 
以毫秒为单位返回 key 的剩余的过期时间。
语法
redis Pttl 命令基本语法如下：
redis 127.0.0.1:6379> PTTL KEY_NAME
可用版本
>= 2.6.0
返回值
当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。
注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。
实例
# 不存在的 key
FLUSHDB
OK
PTTL key
(integer) -2
# key 存在，但没有设置剩余生存时间
SET key value
OK
PTTL key
(integer) -1
# 有剩余生存时间的 key
PEXPIRE key 10086
(integer) 1
PTTL key
(integer) 6179
12	TTL key 
以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。
语法
redis TTL 命令基本语法如下：
redis 127.0.0.1:6379> TTL KEY_NAME
可用版本
>= 1.0.0
返回值
当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间。
注意：在 Redis 2.8 以前，当 key 不存在，或者 key 没有设置剩余生存时间时，命令都返回 -1 。
实例
# 不存在的 key
FLUSHDB
OK
TTL key
(integer) -2
# key 存在，但没有设置剩余生存时间
SET key value
OK
TTL key
(integer) -1
# 有剩余生存时间的 key
EXPIRE key 10086
(integer) 1
TTL key
(integer) 10084
13	RANDOMKEY 
从当前数据库中随机返回一个 key 。
语法
redis RANDOMKEY 命令基本语法如下：
redis 127.0.0.1:6379> RANDOMKEY 
可用版本
>= 1.0.0
返回值
当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil 。
实例
# 数据库不为空
MSET fruit "apple" drink "beer" food "cookies"   # 设置多个 key
OK
RANDOMKEY
"fruit"
RANDOMKEY
"food"
KEYS *    # 查看数据库内所有key，证明 RANDOMKEY 并不删除 key
1) "food"
2) "drink"
3) "fruit"
# 数据库为空
FLUSHDB  # 删除当前数据库所有 key
OK
RANDOMKEY
(nil)
14	RENAME key newkey 
修改 key 的名称
语法
redis Rename 命令基本语法如下：
redis 127.0.0.1:6379> RENAME OLD_KEY_NAME NEW_KEY_NAME
可用版本
>= 1.0.0
返回值
改名成功时提示 OK ，失败时候返回一个错误。
当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。 当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧值。
实例
# key 存在且 newkey 不存在
SET message "hello world"
OK
RENAME message greeting
OK
EXISTS message               # message 不复存在
(integer) 0
EXISTS greeting              # greeting 取而代之
(integer) 1
# 当 key 不存在时，返回错误
RENAME fake_key never_exists
(error) ERR no such key
# newkey 已存在时， RENAME 会覆盖旧 newkey
SET pc "lenovo"
OK
SET personal_computer "dell"
OK
RENAME pc personal_computer
OK
GET pc
(nil)
GET personal_computer      # 原来的值 dell 被覆盖了
"lenovo"
15	RENAMENX key newkey 
仅当 newkey 不存在时，将 key 改名为 newkey 。
语法
redis Renamenx 命令基本语法如下：
redis 127.0.0.1:6379> RENAMENX OLD_KEY_NAME NEW_KEY_NAME
可用版本
>= 1.0.0
返回值
修改成功时，返回 1 。 如果 NEW_KEY_NAME 已经存在，返回 0 。
实例
# newkey 不存在，改名成功
SET player "MPlyaer"
OK
EXISTS best_player
(integer) 0
RENAMENX player best_player
(integer) 1
# newkey存在时，失败
SET animal "bear"
OK
SET favorite_animal "butterfly"
OK
RENAMENX animal favorite_animal
(integer) 0
get animal
"bear"
get favorite_animal
"butterfly"
16	TYPE key 
返回 key 所储存的值的类型。
语法
redis Renamenx 命令基本语法如下：
redis 127.0.0.1:6379> TYPE KEY_NAME 
可用版本
>= 1.0.0
返回值
返回 key 的数据类型，数据类型有：
none (key不存在)
string (字符串)
list (列表)
set (集合)
zset (有序集)
hash (哈希表)
实例
# 字符串
SET weather "sunny"
OK
TYPE weather
string
# 列表
LPUSH book_list "programming in scala"
(integer) 1
TYPE book_list
list
# 集合
SADD pat "dog"
(integer) 1
TYPE pat
set